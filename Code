#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Feb 11 18:05:49 2025

@author: erin
"""

import lightkurve as lk
import matplotlib.pyplot as plt
import numpy as np
from astropy.timeseries import LombScargle

def get_tess_lightcurve(tic_id):
    """Retrieve real TESS light curve for a given TIC ID."""
    search_result = lk.search_lightcurve(f"TIC {tic_id}", mission="TESS")
    if len(search_result) == 0:
        raise ValueError(f"No TESS data found for TIC {tic_id}")
    
    # Download the first available light curve
    lc = search_result[0].download().remove_nans()
    
    return lc.time.value, lc.flux  # Return time and flux arrays

def phase_fold_data(time, flux, frequency):
    """Fold the light curve over a given frequency."""
    period = 1 / frequency  # Convert frequency to period
    phase = (time % period) / period  # Compute phase
    return phase, flux

def plot_periodogram_and_folding_fmin(tic_id):
    """Compute and plot Lomb-Scargle periodogram, then fold data over Fmin frequency."""
    try:
        time, flux = get_tess_lightcurve(tic_id)
        
        # Fmin = 7.7 nHz, convert to cycles per day
        f_min_hz = 7.7e-9  # 7.7 nHz
        f_min_per_day = f_min_hz * 86400  # Convert Hz to cycles per day
        
        # Use np.arange for frequency range
        fmin = 0.01  # Set fmin as a reasonable step size (adjust as necessary)
        frequencies = np.arange(f_min_per_day * 0.5, f_min_per_day * 1.5, fmin)
        
        # Compute Lomb-Scargle periodogram
        power = LombScargle(time, flux).power(frequencies)

        # Plot the periodogram
        plt.figure(figsize=(8, 5))
        plt.plot(frequencies, power, color='g', label="Lomb-Scargle Power")
        plt.axvline(f_min_per_day, color='r', linestyle="--", label="Fmin = 7.7 nHz")
        plt.xlabel("Frequency (1/day)")
        plt.ylabel("Power")
        plt.title(f"Lomb-Scargle Periodogram for TIC {tic_id}")
        plt.legend()
        plt.grid(alpha=0.3)
        plt.show()

        # Phase-fold over Fmin
        phase_min, flux_min = phase_fold_data(time, flux, f_min_per_day)
        plt.figure(figsize=(8, 5))
        plt.scatter(phase_min, flux_min, s=1, color='g', alpha=0.5)
        plt.xlabel("Phase (Fmin)")
        plt.ylabel("Flux")
        plt.title(f"Phase-Folded Light Curve (Fmin = 7.7 nHz) for TIC {tic_id}")
        plt.grid(alpha=0.3)
        plt.show()

    except ValueError as e:
        print(f"Error: {e}")

# Example usage
tic_id = 410038602
plot_periodogram_and_folding_fmin(tic_id)
